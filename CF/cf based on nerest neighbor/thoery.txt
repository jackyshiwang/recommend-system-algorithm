算法思想：基于近邻的协同过滤收集数据生成用户商品评分矩阵，通过计算用户或商品之间的相似度，利用近邻用户或近邻商品的评分进行加权平均求和得到当前用户没有浏览过的产品评分，完善用户对商品评分的矩阵；最终选择该用户对没有浏览过的评分TopN的产品列表推荐给当前用户。可分为基于user的协同过滤和基于item的协同过滤。

基于user的协同过滤步骤：
	1.生成user向量；（确定维度和数值，有优化空间）
	2.计算user之间的相似距离；（选择哪个度量方法）
	3.选取对该item有交互行为的top-K用户的评分构建评分矩阵。（K值如何确定）
	
基于user的协同过滤优化点：
	1.惩罚对热门物品的喜欢程度，因为热门的东西很难反应出用户的真实兴趣；
	2.增加喜欢程度的时间衰减，一般使用一个指数函数，指数就是一个负数，表示距离当前时间越远，喜欢程度会逐渐下降；
	3.均值中心化：（用户A对物品A的评分） 减去（用户A对所有物品的评分的平均分）。
	
基于item的协同过滤步骤：
	1.生成item向量；
	2.计算item之间的相似距离；
	3.选取用户有交互item最相似的top-K个item进行得分计算。
	

基于item的协同过滤优化点：
	1.活跃用户对物品相似度的贡献应该小于不活跃的用户，所以增加一个IUF（Inverse User Frequence）参数来修正物品相似度的计算公式；
	2.item相似度归一化：按照item相似度矩阵最大值归一化。
	
计算距离的方法：
	1.余弦相似度；
	2.Jaccard距离；
	3.皮尔逊距离：仅考虑用户评分交集的标准差，而不是全部评分；如基于用户评分交集，计算用户及物品间的相似度；

近邻的选择：
	大型推荐系统中包含用户和物品信息量过大，由于内存限制，不可能存储全部用户及物品信息，故需做预选近邻：
	1.TOP-N过滤：对于每个用户或物品，保留N个近邻信息。N过大会影响效率，N过小会影响推荐结果准确率；
	2.阈值过滤：保留相似度大于一定阈值的近邻。保留重要的近邻，但阈值的选择也是比较困难的；
	3.负值过滤：责评分关联被过滤；但负关联不能显示留下近邻组的差异程度 ，一些实验发现负关联对预测准确性没有显示提高；
	4.以上三种方法不互斥，可为需要做结合。K值选择一般为20-50。
	
两种方法对比：
	1.准确性：用户量 远远 > 物品量（如亚马逊） -- 基于物品推荐更准确；物品量 > 用户量（如论文系统） -- 基于用户推荐更准确；
	2.效率：用户量 远远 > 物品量 -- 基于物品的推荐更省时间；在线计算依赖有限的物品量和近邻数最大值，所以两个方法效率相同；
	3.稳定性：若物品列表稳定变化小则基于物品推荐更稳定，若物品列表变化快（新增较快）则基于用户推荐更稳定；
	4.合理性：基于物品的方法易于证明合理性（近邻物品列表、与被推荐项的相似度权重等都可做为解释），但用基于用户的方法很难做到这点；
	5.惊喜度：基于物品推荐相对来说较安全，基于用户推荐惊喜度更高。
	
